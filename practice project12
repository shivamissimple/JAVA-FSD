import java.util.concurrent.TimeUnit;

public class SleepWaitDemo {

    static Object lock = new Object();

    public
 
static
 
void
 
main(String[] args)
 
throws InterruptedException {

        Thread thread1 = new Thread(() -> {
            try {
                System.out.println("Thread 1: Going to sleep for 2 seconds.");
                TimeUnit.SECONDS.sleep(2); // Using TimeUnit for better readability
                System.out.println("Thread 1: Woke up after sleep.");

                synchronized (lock) {
                    System.out.println("Thread 1: Waiting on lock...");
                    lock.wait(); // Releases lock and waits
                    System.out.println("Thread 1: Notified and resumed.");
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        Thread thread2 = new Thread(() -> {
            synchronized (lock) {
                try {
                    System.out.println("Thread 2: Acquired lock.");
                    TimeUnit.SECONDS.sleep(1); // Simulate some work
                    System.out.println("Thread 2: Notifying thread 1.");
                    lock.notify();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        thread1.start();
        thread2.start();

        thread1.join(); // Wait for thread 1 to finish
        thread2.join(); // Wait for thread 2 to finish
    }
}
